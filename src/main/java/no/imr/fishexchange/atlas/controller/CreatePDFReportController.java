package no.imr.fishexchange.atlas.controller;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

import javax.imageio.ImageIO;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;

import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.support.ServletContextResourceLoader;

/**
 *
 * @author trondwe
 */
@Controller
public class CreatePDFReportController {
	
	private ResourceLoader resourceLoader = null;
	private BufferedImage theIMRLogoImage = null;
	private BufferedImage theSSFLogoImage = null;
	private JasperReport reportWithParameter = null;
	
	private Integer width = null;
	private Integer height = null;
	private String bbox = null;
	private String sld = null;
	private String layer = null;
	private String layerson = null;
	
	private final String logoHI = "/WEB-INF/app/static/theme/imr/images/HIhoved_bla_bm-eng_CMYK2.jpg";
	private final String logoSSF = "/WEB-INF/app/static/theme/imr/images/SSF_logo.jpg";
	private final String jasperReportUrl = "/WEB-INF/app/static/theme/imr/images/Fishexchange_new.jrxml";
	private final String generalText = "This report have been generated by the FishExChange database," +
    	" and are a product of the Norwegian Research Council (http://www.forskningsradet.no)" +
    	" project Expected change in fisheries in the Barents Sea (FishExChange), NRC contract nr 178338)" +
    	" under their NORKLIMA research program. The project was funded for the period 2007-2010, and was a" +
    	" joint project between the Institute of Marine Research (IMR, http://www.imr.no)" +
    	"  and Institute for Research in Economics and Business Administration (SNF, http:// http://www.snf.no)"; 

	@RequestMapping("/createpdfreport")
    public void createpdfreport( HttpServletRequest request,
            HttpServletResponse response) throws IOException, JRException {

		readRequestVars( request );
    	String url = createBaseLayerUrl();
    	String secondLayer = createFishExchangeLayer();
        String legendUrl = createFishExchangeLegend();
        
        BufferedImage baseLayer = ImageIO.read( new URL(url) );
        BufferedImage second = ImageIO.read( new URL(secondLayer) );
        BufferedImage legendImg = ImageIO.read( new URL(legendUrl) );

        BufferedImage theMapImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
        Graphics2D g2d = (Graphics2D) theMapImage.getGraphics();
        g2d.drawImage(baseLayer, 0, 0, null);
        g2d.drawImage(second, 0, 0, null);
        
        List<String> otherUrls = parseOtherUrls();  
        for ( String otherUrl : otherUrls ) {
        	BufferedImage someOtherUrl = ImageIO.read(new URL(otherUrl));
        	g2d.drawImage(someOtherUrl, 0, 0, null);
        }
        
        response.setContentType("application/pdf");
        response.setHeader("Content-Transfer-Encoding", "Binary");
        response.setHeader("Content-Disposition", "attachment; filename=\"plot.pdf\";");

        if ( theIMRLogoImage == null) {
        	theIMRLogoImage = readImageFromResource( logoHI, request );
        }
        if ( theSSFLogoImage == null ) {
        	theSSFLogoImage = readImageFromResource( logoSSF, request );
        }
        
        HashMap<String,Object> parameterHash = new HashMap<String,Object>();
        parameterHash.put("ABOUT_FISHEXCHANGE", generalText);
        parameterHash.put("META_TEXT_PARAMETER", request.getSession().getAttribute("metadata"));
        parameterHash.put("IMR_Logo_Image", theIMRLogoImage);
        parameterHash.put("SSF_Logo_Image", theSSFLogoImage);
        parameterHash.put("Map_Image", theMapImage);
        parameterHash.put("LEGEND_image", legendImg);
         // FOR EMPTY DataSource use only parameters !!!parameterHash.put("META_TEXT", "Hallo mitt felt");
        
        setupJasperReportWithTemplate();
        JasperPrint printWithParameter = JasperFillManager.fillReport(reportWithParameter, parameterHash, new JREmptyDataSource());
        OutputStream outputfile = response.getOutputStream();
        JasperExportManager.exportReportToPdfStream(printWithParameter, outputfile);
        outputfile.close();
	}
	
	private void readRequestVars( HttpServletRequest request ) {
		if ( request.getParameter("width") != null ) {
			width = Integer.valueOf( request.getParameter("width") );
		} else width = null;
		if ( request.getParameter("height") != null ) {
			height = Integer.valueOf( request.getParameter("height") );
		} else height =  null;
		if ( request.getParameter("bbox") != null ) {
			bbox = request.getParameter("bbox");
		} else bbox =  null;		
		if ( request.getParameter("sld") != null ) {
			sld = request.getParameter("sld");
		} else sld =  null;
		if ( request.getParameter("layer") != null ) {
			layer = request.getParameter("layer");
		} else layer =  null;		
		if ( request.getParameter("layerson") != null ) {
			layerson = request.getParameter("layerson");
		} else layerson =  null;
	}
	
	private void setupJasperReportWithTemplate() throws IOException, JRException {
		if (  reportWithParameter == null ) {
			Resource jasperReport = resourceLoader.getResource( jasperReportUrl );
			InputStream inputfile = jasperReport.getInputStream();
			reportWithParameter = JasperCompileManager.compileReport(inputfile);
		}
	}
	
	private BufferedImage readImageFromResource( String pathToResource, HttpServletRequest request ) throws IOException {
		if ( resourceLoader == null ) {
	        ServletContext servletContext = request.getSession().getServletContext();
	        resourceLoader = new ServletContextResourceLoader( servletContext );			
		}
		Resource resource = resourceLoader.getResource(pathToResource);
        InputStream imageInputStream = resource.getInputStream();
        return ImageIO.read( imageInputStream );
	}
    
	//http://opencache.statkart.no/gatekeeper/gk/gk.open?layers=...&Request=GetMap& 
//	EHAV_MOEEND
//	Passord:            spartakus234 (sma bokstaver)      
//82.134.28.194 talos	
	private String createBaseLayerUrl() {

		String url = "http://wms.geonorge.no/skwms1/wms.europa?" + 
			"VERSION=1.1.1" + 
			"&SERVICE=WMS" + 
			"&REQUEST=GetMap" + 
			"&SRS=EPSG:32633" + 
			"&STYLES=" + 
			"&TRANSPARENT=true" + 
			"&FORMAT=image/png" + 
			"&LAYERS=Land,Vmap0Land,Vmap0Kystkontur,Vmap0Hoydepunkt,Vmap0Elver,Vmap0Hoydekontur,Vmap0MyrSump,Vmap0Innsjo,Vmap0Sletteland,Vmap0Dyrketmark,Vmap0Skog,Vmap0Bebyggelse,Vmap0AdministrativeGrenser,Vmap0Isbre" + 
			"&WIDTH=" + width +
			"&HEIGHT=" + height + 
			"&BBOX=" + bbox + "&ticket=";
		return url;
	}
    
    private String createFishExchangeLayer() {
    	String fishEx = "http://atlas2.nodc.no:8080/geoserver/wms?";
    	fishEx = fishEx.concat("REQUEST=GetMap");
    	fishEx = fishEx.concat("&SERVICE=WMS");
    	fishEx = fishEx.concat("&FORMAT=image/png");
    	fishEx = fishEx.concat("&srs=EPSG:32633");
        //fishEx = fishEx.concat("&srs=" + request.getParameter("srs"));
    	fishEx = fishEx.concat("&transparent=true");
        fishEx = fishEx.concat("&version=1.1.1");
        fishEx = fishEx.concat("&width=" + width);
        fishEx = fishEx.concat("&height=" + height);
        fishEx = fishEx.concat("&SLD=" + sld);
        fishEx = fishEx.concat("&bbox=" + bbox);
        fishEx = fishEx.concat("&layers=").concat(layer);
        
        return fishEx;
    }
    
    private String createFishExchangeLegend() {
        String legendUrl = "http://maps.imr.no/geoserver/wms?service=WMS&version=1.1.1&request=GetLegendGraphic&layer=test:pointvalue&width=22&height=24&format=image/png";
        legendUrl = legendUrl.concat("&SLD=" + sld);
        return legendUrl;
    }
    
    private List<String> parseOtherUrls() throws UnsupportedEncodingException {
    	String allUrls = layerson;
    	String decodedUrl = URLDecoder.decode(allUrls, "utf-8");
    	StringTokenizer tok = new StringTokenizer(decodedUrl, "-");
    	List<String> urls = new LinkedList<String>();
    	while(tok.hasMoreTokens()) {
    		String aTok = tok.nextToken();
    		urls.add( aTok + "&width=" + width + "&height=" + height + "&bbox=" + bbox );
    	}
    	return urls;
    }
}
